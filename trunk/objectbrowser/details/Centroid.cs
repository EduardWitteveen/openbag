//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace qi02.details {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Centroid : DataSet {
        
        private HIT_CTRDataTable tableHIT_CTR;
        
        private OrgRTypes_DataTable tableOrgRTypes_;
        
        private OrgPavements_DataTable tableOrgPavements_;
        
        public Centroid() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Centroid(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["HIT_CTR"] != null)) {
                    this.Tables.Add(new HIT_CTRDataTable(ds.Tables["HIT_CTR"]));
                }
                if ((ds.Tables["OrgRTypes_"] != null)) {
                    this.Tables.Add(new OrgRTypes_DataTable(ds.Tables["OrgRTypes_"]));
                }
                if ((ds.Tables["OrgPavements_"] != null)) {
                    this.Tables.Add(new OrgPavements_DataTable(ds.Tables["OrgPavements_"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HIT_CTRDataTable HIT_CTR {
            get {
                return this.tableHIT_CTR;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrgRTypes_DataTable OrgRTypes_ {
            get {
                return this.tableOrgRTypes_;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrgPavements_DataTable OrgPavements_ {
            get {
                return this.tableOrgPavements_;
            }
        }
        
        public override DataSet Clone() {
            Centroid cln = ((Centroid)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["HIT_CTR"] != null)) {
                this.Tables.Add(new HIT_CTRDataTable(ds.Tables["HIT_CTR"]));
            }
            if ((ds.Tables["OrgRTypes_"] != null)) {
                this.Tables.Add(new OrgRTypes_DataTable(ds.Tables["OrgRTypes_"]));
            }
            if ((ds.Tables["OrgPavements_"] != null)) {
                this.Tables.Add(new OrgPavements_DataTable(ds.Tables["OrgPavements_"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableHIT_CTR = ((HIT_CTRDataTable)(this.Tables["HIT_CTR"]));
            if ((this.tableHIT_CTR != null)) {
                this.tableHIT_CTR.InitVars();
            }
            this.tableOrgRTypes_ = ((OrgRTypes_DataTable)(this.Tables["OrgRTypes_"]));
            if ((this.tableOrgRTypes_ != null)) {
                this.tableOrgRTypes_.InitVars();
            }
            this.tableOrgPavements_ = ((OrgPavements_DataTable)(this.Tables["OrgPavements_"]));
            if ((this.tableOrgPavements_ != null)) {
                this.tableOrgPavements_.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Centroid";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/Centroid.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableHIT_CTR = new HIT_CTRDataTable();
            this.Tables.Add(this.tableHIT_CTR);
            this.tableOrgRTypes_ = new OrgRTypes_DataTable();
            this.Tables.Add(this.tableOrgRTypes_);
            this.tableOrgPavements_ = new OrgPavements_DataTable();
            this.Tables.Add(this.tableOrgPavements_);
        }
        
        private bool ShouldSerializeHIT_CTR() {
            return false;
        }
        
        private bool ShouldSerializeOrgRTypes_() {
            return false;
        }
        
        private bool ShouldSerializeOrgPavements_() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void HIT_CTRRowChangeEventHandler(object sender, HIT_CTRRowChangeEvent e);
        
        public delegate void OrgRTypes_RowChangeEventHandler(object sender, OrgRTypes_RowChangeEvent e);
        
        public delegate void OrgPavements_RowChangeEventHandler(object sender, OrgPavements_RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HIT_CTRDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHandle;
            
            private DataColumn columnPavement;
            
            private DataColumn columnRType;
            
            private DataColumn columnParentcadid;
            
            private DataColumn columnArea;
            
            private DataColumn columnOrgRType;
            
            private DataColumn columnOrgPavement;
            
            private DataColumn columnAtt1;
            
            private DataColumn columnAtt2;
            
            private DataColumn columnAtt3;
            
            private DataColumn columnAtt4;
            
            private DataColumn columnAtt5;
            
            private DataColumn columnmapid;
            
            private DataColumn columnX;
            
            private DataColumn columnY;
            
            internal HIT_CTRDataTable() : 
                    base("HIT_CTR") {
                this.InitClass();
            }
            
            internal HIT_CTRDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn HandleColumn {
                get {
                    return this.columnHandle;
                }
            }
            
            internal DataColumn PavementColumn {
                get {
                    return this.columnPavement;
                }
            }
            
            internal DataColumn RTypeColumn {
                get {
                    return this.columnRType;
                }
            }
            
            internal DataColumn ParentcadidColumn {
                get {
                    return this.columnParentcadid;
                }
            }
            
            internal DataColumn AreaColumn {
                get {
                    return this.columnArea;
                }
            }
            
            internal DataColumn OrgRTypeColumn {
                get {
                    return this.columnOrgRType;
                }
            }
            
            internal DataColumn OrgPavementColumn {
                get {
                    return this.columnOrgPavement;
                }
            }
            
            internal DataColumn Att1Column {
                get {
                    return this.columnAtt1;
                }
            }
            
            internal DataColumn Att2Column {
                get {
                    return this.columnAtt2;
                }
            }
            
            internal DataColumn Att3Column {
                get {
                    return this.columnAtt3;
                }
            }
            
            internal DataColumn Att4Column {
                get {
                    return this.columnAtt4;
                }
            }
            
            internal DataColumn Att5Column {
                get {
                    return this.columnAtt5;
                }
            }
            
            internal DataColumn mapidColumn {
                get {
                    return this.columnmapid;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            public HIT_CTRRow this[int index] {
                get {
                    return ((HIT_CTRRow)(this.Rows[index]));
                }
            }
            
            public event HIT_CTRRowChangeEventHandler HIT_CTRRowChanged;
            
            public event HIT_CTRRowChangeEventHandler HIT_CTRRowChanging;
            
            public event HIT_CTRRowChangeEventHandler HIT_CTRRowDeleted;
            
            public event HIT_CTRRowChangeEventHandler HIT_CTRRowDeleting;
            
            public void AddHIT_CTRRow(HIT_CTRRow row) {
                this.Rows.Add(row);
            }
            
            public HIT_CTRRow AddHIT_CTRRow(string Handle, string Pavement, string RType, string Parentcadid, string Area, string OrgRType, string OrgPavement, string Att1, string Att2, string Att3, string Att4, string Att5, long mapid, System.Double X, System.Double Y) {
                HIT_CTRRow rowHIT_CTRRow = ((HIT_CTRRow)(this.NewRow()));
                rowHIT_CTRRow.ItemArray = new object[] {
                        Handle,
                        Pavement,
                        RType,
                        Parentcadid,
                        Area,
                        OrgRType,
                        OrgPavement,
                        Att1,
                        Att2,
                        Att3,
                        Att4,
                        Att5,
                        mapid,
                        X,
                        Y};
                this.Rows.Add(rowHIT_CTRRow);
                return rowHIT_CTRRow;
            }
            
            public HIT_CTRRow FindByHandle(string Handle) {
                return ((HIT_CTRRow)(this.Rows.Find(new object[] {
                            Handle})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                HIT_CTRDataTable cln = ((HIT_CTRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new HIT_CTRDataTable();
            }
            
            internal void InitVars() {
                this.columnHandle = this.Columns["Handle"];
                this.columnPavement = this.Columns["Pavement"];
                this.columnRType = this.Columns["RType"];
                this.columnParentcadid = this.Columns["Parentcadid"];
                this.columnArea = this.Columns["Area"];
                this.columnOrgRType = this.Columns["OrgRType"];
                this.columnOrgPavement = this.Columns["OrgPavement"];
                this.columnAtt1 = this.Columns["Att1"];
                this.columnAtt2 = this.Columns["Att2"];
                this.columnAtt3 = this.Columns["Att3"];
                this.columnAtt4 = this.Columns["Att4"];
                this.columnAtt5 = this.Columns["Att5"];
                this.columnmapid = this.Columns["mapid"];
                this.columnX = this.Columns["X"];
                this.columnY = this.Columns["Y"];
            }
            
            private void InitClass() {
                this.columnHandle = new DataColumn("Handle", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHandle);
                this.columnPavement = new DataColumn("Pavement", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPavement);
                this.columnRType = new DataColumn("RType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRType);
                this.columnParentcadid = new DataColumn("Parentcadid", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentcadid);
                this.columnArea = new DataColumn("Area", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnArea);
                this.columnOrgRType = new DataColumn("OrgRType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgRType);
                this.columnOrgPavement = new DataColumn("OrgPavement", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgPavement);
                this.columnAtt1 = new DataColumn("Att1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAtt1);
                this.columnAtt2 = new DataColumn("Att2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAtt2);
                this.columnAtt3 = new DataColumn("Att3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAtt3);
                this.columnAtt4 = new DataColumn("Att4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAtt4);
                this.columnAtt5 = new DataColumn("Att5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAtt5);
                this.columnmapid = new DataColumn("mapid", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmapid);
                this.columnX = new DataColumn("X", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX);
                this.columnY = new DataColumn("Y", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnY);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnHandle}, true));
                this.columnHandle.AllowDBNull = false;
                this.columnHandle.Unique = true;
            }
            
            public HIT_CTRRow NewHIT_CTRRow() {
                return ((HIT_CTRRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new HIT_CTRRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(HIT_CTRRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HIT_CTRRowChanged != null)) {
                    this.HIT_CTRRowChanged(this, new HIT_CTRRowChangeEvent(((HIT_CTRRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HIT_CTRRowChanging != null)) {
                    this.HIT_CTRRowChanging(this, new HIT_CTRRowChangeEvent(((HIT_CTRRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HIT_CTRRowDeleted != null)) {
                    this.HIT_CTRRowDeleted(this, new HIT_CTRRowChangeEvent(((HIT_CTRRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HIT_CTRRowDeleting != null)) {
                    this.HIT_CTRRowDeleting(this, new HIT_CTRRowChangeEvent(((HIT_CTRRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHIT_CTRRow(HIT_CTRRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HIT_CTRRow : DataRow {
            
            private HIT_CTRDataTable tableHIT_CTR;
            
            internal HIT_CTRRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableHIT_CTR = ((HIT_CTRDataTable)(this.Table));
            }
            
            public string Handle {
                get {
                    return ((string)(this[this.tableHIT_CTR.HandleColumn]));
                }
                set {
                    this[this.tableHIT_CTR.HandleColumn] = value;
                }
            }
            
            public string Pavement {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.PavementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.PavementColumn] = value;
                }
            }
            
            public string RType {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.RTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.RTypeColumn] = value;
                }
            }
            
            public string Parentcadid {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.ParentcadidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.ParentcadidColumn] = value;
                }
            }
            
            public string Area {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.AreaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.AreaColumn] = value;
                }
            }
            
            public string OrgRType {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.OrgRTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.OrgRTypeColumn] = value;
                }
            }
            
            public string OrgPavement {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.OrgPavementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.OrgPavementColumn] = value;
                }
            }
            
            public string Att1 {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.Att1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.Att1Column] = value;
                }
            }
            
            public string Att2 {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.Att2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.Att2Column] = value;
                }
            }
            
            public string Att3 {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.Att3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.Att3Column] = value;
                }
            }
            
            public string Att4 {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.Att4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.Att4Column] = value;
                }
            }
            
            public string Att5 {
                get {
                    try {
                        return ((string)(this[this.tableHIT_CTR.Att5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.Att5Column] = value;
                }
            }
            
            public long mapid {
                get {
                    try {
                        return ((long)(this[this.tableHIT_CTR.mapidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.mapidColumn] = value;
                }
            }
            
            public System.Double X {
                get {
                    try {
                        return ((System.Double)(this[this.tableHIT_CTR.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.XColumn] = value;
                }
            }
            
            public System.Double Y {
                get {
                    try {
                        return ((System.Double)(this[this.tableHIT_CTR.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIT_CTR.YColumn] = value;
                }
            }
            
            public bool IsPavementNull() {
                return this.IsNull(this.tableHIT_CTR.PavementColumn);
            }
            
            public void SetPavementNull() {
                this[this.tableHIT_CTR.PavementColumn] = System.Convert.DBNull;
            }
            
            public bool IsRTypeNull() {
                return this.IsNull(this.tableHIT_CTR.RTypeColumn);
            }
            
            public void SetRTypeNull() {
                this[this.tableHIT_CTR.RTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentcadidNull() {
                return this.IsNull(this.tableHIT_CTR.ParentcadidColumn);
            }
            
            public void SetParentcadidNull() {
                this[this.tableHIT_CTR.ParentcadidColumn] = System.Convert.DBNull;
            }
            
            public bool IsAreaNull() {
                return this.IsNull(this.tableHIT_CTR.AreaColumn);
            }
            
            public void SetAreaNull() {
                this[this.tableHIT_CTR.AreaColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgRTypeNull() {
                return this.IsNull(this.tableHIT_CTR.OrgRTypeColumn);
            }
            
            public void SetOrgRTypeNull() {
                this[this.tableHIT_CTR.OrgRTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgPavementNull() {
                return this.IsNull(this.tableHIT_CTR.OrgPavementColumn);
            }
            
            public void SetOrgPavementNull() {
                this[this.tableHIT_CTR.OrgPavementColumn] = System.Convert.DBNull;
            }
            
            public bool IsAtt1Null() {
                return this.IsNull(this.tableHIT_CTR.Att1Column);
            }
            
            public void SetAtt1Null() {
                this[this.tableHIT_CTR.Att1Column] = System.Convert.DBNull;
            }
            
            public bool IsAtt2Null() {
                return this.IsNull(this.tableHIT_CTR.Att2Column);
            }
            
            public void SetAtt2Null() {
                this[this.tableHIT_CTR.Att2Column] = System.Convert.DBNull;
            }
            
            public bool IsAtt3Null() {
                return this.IsNull(this.tableHIT_CTR.Att3Column);
            }
            
            public void SetAtt3Null() {
                this[this.tableHIT_CTR.Att3Column] = System.Convert.DBNull;
            }
            
            public bool IsAtt4Null() {
                return this.IsNull(this.tableHIT_CTR.Att4Column);
            }
            
            public void SetAtt4Null() {
                this[this.tableHIT_CTR.Att4Column] = System.Convert.DBNull;
            }
            
            public bool IsAtt5Null() {
                return this.IsNull(this.tableHIT_CTR.Att5Column);
            }
            
            public void SetAtt5Null() {
                this[this.tableHIT_CTR.Att5Column] = System.Convert.DBNull;
            }
            
            public bool IsmapidNull() {
                return this.IsNull(this.tableHIT_CTR.mapidColumn);
            }
            
            public void SetmapidNull() {
                this[this.tableHIT_CTR.mapidColumn] = System.Convert.DBNull;
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableHIT_CTR.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableHIT_CTR.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableHIT_CTR.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableHIT_CTR.YColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HIT_CTRRowChangeEvent : EventArgs {
            
            private HIT_CTRRow eventRow;
            
            private DataRowAction eventAction;
            
            public HIT_CTRRowChangeEvent(HIT_CTRRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HIT_CTRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrgRTypes_DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRtype;
            
            private DataColumn columncwvo_omschrijving;
            
            internal OrgRTypes_DataTable() : 
                    base("OrgRTypes_") {
                this.InitClass();
            }
            
            internal OrgRTypes_DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RtypeColumn {
                get {
                    return this.columnRtype;
                }
            }
            
            internal DataColumn cwvo_omschrijvingColumn {
                get {
                    return this.columncwvo_omschrijving;
                }
            }
            
            public OrgRTypes_Row this[int index] {
                get {
                    return ((OrgRTypes_Row)(this.Rows[index]));
                }
            }
            
            public event OrgRTypes_RowChangeEventHandler OrgRTypes_RowChanged;
            
            public event OrgRTypes_RowChangeEventHandler OrgRTypes_RowChanging;
            
            public event OrgRTypes_RowChangeEventHandler OrgRTypes_RowDeleted;
            
            public event OrgRTypes_RowChangeEventHandler OrgRTypes_RowDeleting;
            
            public void AddOrgRTypes_Row(OrgRTypes_Row row) {
                this.Rows.Add(row);
            }
            
            public OrgRTypes_Row AddOrgRTypes_Row(string Rtype, string cwvo_omschrijving) {
                OrgRTypes_Row rowOrgRTypes_Row = ((OrgRTypes_Row)(this.NewRow()));
                rowOrgRTypes_Row.ItemArray = new object[] {
                        Rtype,
                        cwvo_omschrijving};
                this.Rows.Add(rowOrgRTypes_Row);
                return rowOrgRTypes_Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OrgRTypes_DataTable cln = ((OrgRTypes_DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OrgRTypes_DataTable();
            }
            
            internal void InitVars() {
                this.columnRtype = this.Columns["Rtype"];
                this.columncwvo_omschrijving = this.Columns["cwvo_omschrijving"];
            }
            
            private void InitClass() {
                this.columnRtype = new DataColumn("Rtype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRtype);
                this.columncwvo_omschrijving = new DataColumn("cwvo_omschrijving", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncwvo_omschrijving);
            }
            
            public OrgRTypes_Row NewOrgRTypes_Row() {
                return ((OrgRTypes_Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OrgRTypes_Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrgRTypes_Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrgRTypes_RowChanged != null)) {
                    this.OrgRTypes_RowChanged(this, new OrgRTypes_RowChangeEvent(((OrgRTypes_Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrgRTypes_RowChanging != null)) {
                    this.OrgRTypes_RowChanging(this, new OrgRTypes_RowChangeEvent(((OrgRTypes_Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrgRTypes_RowDeleted != null)) {
                    this.OrgRTypes_RowDeleted(this, new OrgRTypes_RowChangeEvent(((OrgRTypes_Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrgRTypes_RowDeleting != null)) {
                    this.OrgRTypes_RowDeleting(this, new OrgRTypes_RowChangeEvent(((OrgRTypes_Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrgRTypes_Row(OrgRTypes_Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrgRTypes_Row : DataRow {
            
            private OrgRTypes_DataTable tableOrgRTypes_;
            
            internal OrgRTypes_Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrgRTypes_ = ((OrgRTypes_DataTable)(this.Table));
            }
            
            public string Rtype {
                get {
                    try {
                        return ((string)(this[this.tableOrgRTypes_.RtypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgRTypes_.RtypeColumn] = value;
                }
            }
            
            public string cwvo_omschrijving {
                get {
                    try {
                        return ((string)(this[this.tableOrgRTypes_.cwvo_omschrijvingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgRTypes_.cwvo_omschrijvingColumn] = value;
                }
            }
            
            public bool IsRtypeNull() {
                return this.IsNull(this.tableOrgRTypes_.RtypeColumn);
            }
            
            public void SetRtypeNull() {
                this[this.tableOrgRTypes_.RtypeColumn] = System.Convert.DBNull;
            }
            
            public bool Iscwvo_omschrijvingNull() {
                return this.IsNull(this.tableOrgRTypes_.cwvo_omschrijvingColumn);
            }
            
            public void Setcwvo_omschrijvingNull() {
                this[this.tableOrgRTypes_.cwvo_omschrijvingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrgRTypes_RowChangeEvent : EventArgs {
            
            private OrgRTypes_Row eventRow;
            
            private DataRowAction eventAction;
            
            public OrgRTypes_RowChangeEvent(OrgRTypes_Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrgRTypes_Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrgPavements_DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncvha_omschrijving;
            
            private DataColumn columncvht_omschrijving;
            
            internal OrgPavements_DataTable() : 
                    base("OrgPavements_") {
                this.InitClass();
            }
            
            internal OrgPavements_DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn cvha_omschrijvingColumn {
                get {
                    return this.columncvha_omschrijving;
                }
            }
            
            internal DataColumn cvht_omschrijvingColumn {
                get {
                    return this.columncvht_omschrijving;
                }
            }
            
            public OrgPavements_Row this[int index] {
                get {
                    return ((OrgPavements_Row)(this.Rows[index]));
                }
            }
            
            public event OrgPavements_RowChangeEventHandler OrgPavements_RowChanged;
            
            public event OrgPavements_RowChangeEventHandler OrgPavements_RowChanging;
            
            public event OrgPavements_RowChangeEventHandler OrgPavements_RowDeleted;
            
            public event OrgPavements_RowChangeEventHandler OrgPavements_RowDeleting;
            
            public void AddOrgPavements_Row(OrgPavements_Row row) {
                this.Rows.Add(row);
            }
            
            public OrgPavements_Row AddOrgPavements_Row(string cvha_omschrijving, string cvht_omschrijving) {
                OrgPavements_Row rowOrgPavements_Row = ((OrgPavements_Row)(this.NewRow()));
                rowOrgPavements_Row.ItemArray = new object[] {
                        cvha_omschrijving,
                        cvht_omschrijving};
                this.Rows.Add(rowOrgPavements_Row);
                return rowOrgPavements_Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OrgPavements_DataTable cln = ((OrgPavements_DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OrgPavements_DataTable();
            }
            
            internal void InitVars() {
                this.columncvha_omschrijving = this.Columns["cvha_omschrijving"];
                this.columncvht_omschrijving = this.Columns["cvht_omschrijving"];
            }
            
            private void InitClass() {
                this.columncvha_omschrijving = new DataColumn("cvha_omschrijving", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncvha_omschrijving);
                this.columncvht_omschrijving = new DataColumn("cvht_omschrijving", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncvht_omschrijving);
            }
            
            public OrgPavements_Row NewOrgPavements_Row() {
                return ((OrgPavements_Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OrgPavements_Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrgPavements_Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrgPavements_RowChanged != null)) {
                    this.OrgPavements_RowChanged(this, new OrgPavements_RowChangeEvent(((OrgPavements_Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrgPavements_RowChanging != null)) {
                    this.OrgPavements_RowChanging(this, new OrgPavements_RowChangeEvent(((OrgPavements_Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrgPavements_RowDeleted != null)) {
                    this.OrgPavements_RowDeleted(this, new OrgPavements_RowChangeEvent(((OrgPavements_Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrgPavements_RowDeleting != null)) {
                    this.OrgPavements_RowDeleting(this, new OrgPavements_RowChangeEvent(((OrgPavements_Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrgPavements_Row(OrgPavements_Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrgPavements_Row : DataRow {
            
            private OrgPavements_DataTable tableOrgPavements_;
            
            internal OrgPavements_Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrgPavements_ = ((OrgPavements_DataTable)(this.Table));
            }
            
            public string cvha_omschrijving {
                get {
                    try {
                        return ((string)(this[this.tableOrgPavements_.cvha_omschrijvingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgPavements_.cvha_omschrijvingColumn] = value;
                }
            }
            
            public string cvht_omschrijving {
                get {
                    try {
                        return ((string)(this[this.tableOrgPavements_.cvht_omschrijvingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgPavements_.cvht_omschrijvingColumn] = value;
                }
            }
            
            public bool Iscvha_omschrijvingNull() {
                return this.IsNull(this.tableOrgPavements_.cvha_omschrijvingColumn);
            }
            
            public void Setcvha_omschrijvingNull() {
                this[this.tableOrgPavements_.cvha_omschrijvingColumn] = System.Convert.DBNull;
            }
            
            public bool Iscvht_omschrijvingNull() {
                return this.IsNull(this.tableOrgPavements_.cvht_omschrijvingColumn);
            }
            
            public void Setcvht_omschrijvingNull() {
                this[this.tableOrgPavements_.cvht_omschrijvingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrgPavements_RowChangeEvent : EventArgs {
            
            private OrgPavements_Row eventRow;
            
            private DataRowAction eventAction;
            
            public OrgPavements_RowChangeEvent(OrgPavements_Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrgPavements_Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
